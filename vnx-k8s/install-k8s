#!/bin/bash

START_TIME=$SECONDS

function pak { 
  if [ ! -z "$PAUSE"  ]; then
    read -p "Press any key to continue..."; 
  fi
}

function msg () { 
  echo "--"
  echo "-- $1"
  echo "--" 
}

if [[ "$1" == "-p" ]]; then PAUSE="yes"; fi

ALL='k8s-master k8s-worker1 k8s-worker2'

for m in $ALL; do 
  msg "Testing conectivity to $m"
  echo ssh root@${m} w
  ssh root@${m} w
done
pak

for m in $ALL; do 

  msg "Initial configuration of $m"
  ssh root@${m} "
      sed -i '/swap/d' /etc/fstab
      swapoff -a
      echo 'overlay' >> /etc/modules-load.d/containerd.conf
      echo 'br_netfilter' >> /etc/modules-load.d/containerd.conf
      modprobe overlay
      modprobe br_netfilter

      echo 'net.bridge.bridge-nf-call-ip6tables = 1' >> /etc/sysctl.d/kubernetes.conf
      echo 'net.bridge.bridge-nf-call-iptables = 1' >> /etc/sysctl.d/kubernetes.conf
      echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.d/kubernetes.conf

      sysctl --system
  "
  #pak

  msg "Step 3) Install containerd run time"
  echo ssh root@${m} 'apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates'
  ssh root@${m} 'apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates'
  #pak

  echo ssh root@${m} 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg  --dearmor | tee /etc/apt/trusted.gpg.d/docker.gpg > /dev/null'
  #ssh root@${m} 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg'
  # See: https://gist.github.com/notpushkin/1cbdd3cbab0cf3570f87b7f2c0cb852d
  ssh root@${m} 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg  --dearmor | tee /etc/apt/trusted.gpg.d/docker.gpg > /dev/null'
  #pak

  echo ssh root@${m} 'add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"'
  ssh root@${m} 'add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"'
  #pak

  echo ssh root@${m} 'apt update'
  ssh root@${m} 'apt update'
  #pak

  echo ssh root@${m} 'apt install -y containerd.io'
  ssh root@${m} 'apt install -y containerd.io'
  #pak

  echo ssh root@${m} 'containerd config default | tee /etc/containerd/config.toml >/dev/null 2>&1'
  ssh root@${m} 'containerd config default | tee /etc/containerd/config.toml >/dev/null 2>&1'
  #pak

  echo ssh root@${m} "sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml"
  ssh root@${m} "sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml"
  #pak

  echo ssh root@${m} 'systemctl restart containerd'
  ssh root@${m} 'systemctl restart containerd'
  #pak

  echo ssh root@${m} 'systemctl enable containerd'
  ssh root@${m} 'systemctl enable containerd'
  pak

done

for m in $ALL; do 

  msg "Step 4) Add apt repository for Kubernetes ($m)"
  ssh root@${m} "
      curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor | tee /etc/apt/trusted.gpg.d/k8s.gpg > /dev/null
      #curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      apt-add-repository 'deb http://apt.kubernetes.io/ kubernetes-xenial main'
  "
  msg "Step 5) Install Kubernetes components Kubectl, kubeadm & kubelet ($m)"
  ssh root@${m} "
      apt update
      apt install -y kubelet kubeadm kubectl
      apt-mark hold kubelet kubeadm kubectl
  "
  pak

done


msg "Step 6) Initialize Kubernetes cluster with Kubeadm command (k8s-master)"
msg "  Downloading images..."
pak
ssh root@k8s-master "kubeadm config images pull"
msg "  Executing kubeadm init on master node..."
ssh root@k8s-master "
  kubeadm init --control-plane-endpoint=10.10.10.10

  mkdir -p \$HOME/.kube
  cp -i /etc/kubernetes/admin.conf \$HOME/.kube/config
  chown \$(id -u):\$(id -g) \$HOME/.kube/config
  kubectl cluster-info
  kubectl get nodes
"
pak

JOINCMD=$( ssh root@k8s-master "kubeadm token create --print-join-command" )
echo $JOINCMD
pak

msg "Adding worker1..."
ssh root@k8s-worker1 "$JOINCMD"
pak

msg "Adding worker2..."
ssh root@k8s-worker2 "$JOINCMD"
pak

ssh root@k8s-master "kubectl get nodes"
pak

msg "Step 6) Install Calico Pod Network Add-on"
#  curl https://projectcalico.docs.tigera.io/manifests/calico.yaml -O
#  kubectl apply -f calico.yaml
ssh root@k8s-master "
  kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
  kubectl set env daemonset/calico-node -n kube-system  IP_AUTODETECTION_METHOD=interface=eth1
"

sleep 30
ssh root@k8s-master "kubectl get pods -n kube-system"
pak

msg "Step 7) Install Multus"
ssh root@k8s-master "
    git clone https://github.com/k8snetworkplumbingwg/multus-cni.git
    cd multus-cni
    cat ./deployments/multus-daemonset-thick.yml | kubectl apply -f -
    sleep 10
    kubectl get pods --all-namespaces | grep -i multus
"


ELAPSED_TIME=$(($SECONDS - $START_TIME))
echo "--"
echo "-- K8s installed in $ELAPSED_TIME seconds"
echo "--"

